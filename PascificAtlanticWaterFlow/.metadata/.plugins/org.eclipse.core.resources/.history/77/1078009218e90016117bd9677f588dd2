package Snippet;

public class PascificAtlantic {
	
	public static void main(String args[]){
		int mat[][] = new int[][]{{1,2,2,3,5},{3,2,3,4,4},{2,4,5,3,1},{6,7,1,4,5},{5,1,1,2,4}};
		new PascificAtlantic().pascificAtlantic(mat);
	}
	
	public void pascificAtlantic(int mat[][]){
		int rows = mat.length;
		int cols = mat[0].length;
		int pas[][] = new int[rows][cols];
		int atl[][] = new int[rows][cols];
		
		for(int i=0;i<rows; i++){
			DFS(mat, Integer.MIN_VALUE, i, 0, pas, null);
			DFS(mat, Integer.MIN_VALUE, i, cols-1, atl, null);
		}
		
		for(int i=0;i<cols;i++){
			DFS(mat, Integer.MIN_VALUE, 0, i, pas, null);
			DFS(mat, Integer.MIN_VALUE, rows-1, i, atl, null);
		}
		
		
		for(int i=0;i<rows;i++){
			for(int j=0;j<cols;j++){
				if(pas[i][j] == atl[i][j]){
					System.out.println();
				}
			}
		}
		
		for(int [] row: mat){
			for(int col: row){
				System.out.print( col + " | ");
			}
			System.out.println();
		}
		System.out.println();
		for(int [] row: pas){
			for(int col: row){
				System.out.print( col + " | ");
			}
			System.out.println();
		}
		System.out.println();
		for(int [] row: atl){
			for(int col: row){
				System.out.print( col + " | ");
			}
			System.out.println();
		}
		System.out.println();
	}
		
	public void DFS(int mat[][], int parent, int row, int col, int visit[][], String direction){
		if(row >= mat.length || row<0){ return; }
		if(col >= mat[0].length || col<0){ return; }
		else{
			if(mat[row][col] < parent){ return; }
			visit[row][col] = 1;
			int curr = mat[row][col];
			if(direction == null){
				DFS(mat, curr, row+1, col, visit, "south");
				DFS(mat, curr, row, col+1, visit, "east");
				DFS(mat, curr, row-1, col, visit, "north");
				DFS(mat, curr, row, col-1, visit, "west");
			}
			else if(direction.equals("north")){
				DFS(mat, curr, row, col+1, visit, "east");
				DFS(mat, curr, row-1, col, visit, "north");
				DFS(mat, curr, row, col-1, visit, "west");
			}
			else if (direction.equals("south")) {
				DFS(mat, curr, row+1, col, visit, "south");
				DFS(mat, curr, row, col+1, visit, "east");
				DFS(mat, curr, row, col-1, visit, "west");
			} 
			else if (direction.equals("west")) {
				DFS(mat, curr, row+1, col, visit, "south");
				DFS(mat, curr, row-1, col, visit, "north");
				DFS(mat, curr, row, col-1, visit, "west");
			} 
			else{
				DFS(mat, curr, row+1, col, visit, "south");
				DFS(mat, curr, row, col+1, visit, "east");
				DFS(mat, curr, row-1, col, visit, "north");
			}
		}
	}
}
